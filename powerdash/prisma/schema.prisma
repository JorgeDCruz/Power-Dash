// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Employee {
    employeeID           String          @id @default(uuid())
    employeeName         String?
    employeeCountry      String
    employeeState        String
    employeeCity         String
    yearsXP              Int?
    employeePosition     String?
    employeeArea         String
    programmingLanguages String[]
    technologies         String[]
    certifications       Certification[]
}

model Certification {
    employeeID            String    @id @default(uuid())
    // The line comment is only fi is necesari
    // certificationID            String    @default(uuid())
    certificationName     String
    certificationProvider String?
    certificationStatus   Boolean?
    certificationType     String?
    expirationDate        DateTime?
    marketCertification   Boolean   @default(false)
    employeeId            String
    obtainedBy            Employee  @relation(fields: [employeeId], references: [employeeID])
    // @@id([employeeId, certificationID])
}

model Deck {
    deckID         Int      @id @default(autoincrement())
    deckName       String
    deckMembersIDs String[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
